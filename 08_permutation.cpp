/******************
 * Full Permutation Algorithm
	reference: blog.csdn.net/joylnwang/article/details/7064115
		A full permutation set could be generated by created a Choice Tree.
		Use recursive algorithm to avoid the build of Choice Tree

	g++ -W ./08_permutation.cpp -o test
********************/

#include <iostream>

using namespace std;

struct Node{
	char value;
	struct Node *next;
};

Node *arrayToTreeLevel(char *array, int size)
{
	Node *root = NULL;
	Node *tail = NULL;

	for(int i=0; i < size; ++i)
	{
		Node *node = new Node;
		if(i==0)
		{
			root = node;
			tail = node;
			node->value = array[i];
			node->next = NULL;
		}
		else
		{
			tail->next = node;
			node->value = array[i];
			node->next = NULL;
			tail = node;
		}
	}

	return root;
}

void printLevel(Node *root)
{
	Node *temp = NULL;
	temp = root;
	while(temp != NULL)
	{
		cout << temp->value << " * ";
		temp = temp->next;
	}
}


inline void swap(char *array, int i, int j)
{
	char temp = array[i];
	array[i] = array[j];
	array[j] = temp;
}

void Permutate( char *array, int array_size, int index)
{
	if(index >= array_size)
	{
		for(int i=0; i < array_size; ++i)
		{
			cout << array[i] << " ";
		}

		cout << endl;

		return;
	}
	/// Each for loop corresponds each choice tree down path!
	/// i=0; a b c  a c b  
	/// i=1; b a c  b c a 
	/// i=2; c b a  c a b
	for(int i=index; i < array_size; ++i)
	{
		cout << "hit" << endl;
		swap(array, i, index);
		Permutate(array, array_size, index+1);
		swap(array, i, index);
	}
}

int main(int argc, char *argv[])
{
	char set[3] = {'a', 'b', 'c'};

	Permutate(set, 3, 0);

	//printLevel( arrayToTreeLevel(set, 3) );

	return 0;
}

